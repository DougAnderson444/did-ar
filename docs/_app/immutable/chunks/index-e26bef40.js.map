{"version":3,"file":"index-e26bef40.js","sources":["../../../../../../src/lib/resolver.ts"],"sourcesContent":["// https://github.com/decentralized-identity/did-resolver\r\nimport Arweave from 'arweave';\r\nimport { readContract } from 'smartweave';\r\nimport * as utils from './utils';\r\n\r\nexport interface DIDDocumentMetadata extends Extensible {\r\n\tcreated?: string;\r\n\tupdated?: string;\r\n\tdeactivated?: boolean;\r\n\tversionId?: string;\r\n\tnextUpdate?: string;\r\n\tnextVersionId?: string;\r\n\tequivalentId?: string;\r\n\tcanonicalId?: string;\r\n}\r\n\r\nexport type DIDDocument = {\r\n\t'@context'?: 'https://www.w3.org/ns/did/v1' | string | string[];\r\n\tid: string;\r\n\talsoKnownAs?: string[];\r\n\tcontroller?: string | string[];\r\n\tverificationMethod?: VerificationMethod[];\r\n\tservice?: Service[];\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\tpublicKey?: VerificationMethod[];\r\n} & {\r\n\t[x in KeyCapabilitySection]?: (string | VerificationMethod)[];\r\n};\r\n\r\nexport function getResolver() {\r\n\t/**\r\n\t * @param {string} did\r\n\t * @param {string} parsed.method\r\n\t * @param {string} parsed.id\r\n\t * @param {string} parsed.did\r\n\t * @param {string} parsed.path\r\n\t * @param {string} parsed.fragment\r\n\t * @param {Resolver} didResolver\r\n\t * @param {DIDResolutionOptions} options\r\n\t */\r\n\tasync function resolveAr(\r\n\t\tdid: string,\r\n\t\tparsed: ParsedDID,\r\n\t\tdidResolver: Resolver,\r\n\t\toptions: DIDResolutionOptions\r\n\t): Promise<DIDDocument> {\r\n\t\t// const isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n\r\n\t\t// const { WarpFactory } = await import('warp-contracts'); // build process needs node version\r\n\t\t// let warp = WarpFactory.forMainnet();\r\n\t\t// const didDocument = (await warp.contract(parsed.id).readState()).cachedValue.state; // lookup doc\r\n\t\tconst arweave = Arweave.init({\r\n\t\t\thost: 'arweave.net',\r\n\t\t\tport: 443,\r\n\t\t\tprotocol: 'https'\r\n\t\t});\r\n\t\tconst didDocument = await readContract(arweave, parsed.id);\r\n\r\n\t\t// If you need to lookup another did as part of resolving this did document, the primary DIDResolver object is passed in as well\r\n\t\t// const parentDID = await didResolver.resolve(...)\r\n\t\t// Return the DIDResolutionResult object\r\n\t\treturn {\r\n\t\t\tdidResolutionMetadata: { contentType: 'application/did+ld+json' },\r\n\t\t\tdidDocument,\r\n\t\t\tdidDocumentMetadata: {}\r\n\t\t};\r\n\t}\r\n\r\n\tasync function resolveArlocal(\r\n\t\tdid: string,\r\n\t\tparsed: ParsedDID,\r\n\t\tdidResolver: Resolver,\r\n\t\toptions: DIDResolutionOptions\r\n\t): Promise<DIDDocument> {\r\n\t\t// const isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n\t\t// const { WarpFactory } = await import('warp-contracts'); // build process needs node version\r\n\t\t// let warp = WarpFactory.forLocal();\r\n\t\t// const didDocument = (await warp.contract(parsed.id).readState()).cachedValue.state; // lookup doc\r\n\t\tconsole.log('Resolving IDENTITY: ', parsed.id);\r\n\t\tconst arweave = Arweave.init({\r\n\t\t\thost: '127.0.0.1',\r\n\t\t\tport: 1984,\r\n\t\t\tprotocol: 'http'\r\n\t\t});\r\n\t\ttry {\r\n\t\t\tconsole.log('Resolving ON: ', arweave);\r\n\t\t\tconst didDocument = await readContract(arweave, parsed.id);\r\n\t\t\tconsole.log({ didDocument });\r\n\r\n\t\t\t// If you need to lookup another did as part of resolving this did document, the primary DIDResolver object is passed in as well\r\n\t\t\t// const parentDID = await didResolver.resolve(...)\r\n\t\t\t// Return the DIDResolutionResult object\r\n\t\t\treturn {\r\n\t\t\t\tdidResolutionMetadata: { contentType: 'application/did+ld+json' },\r\n\t\t\t\tdidDocument,\r\n\t\t\t\tdidDocumentMetadata: {}\r\n\t\t\t};\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('Resolver error', error);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn { ar: resolveAr, arlocal: resolveArlocal };\r\n}\r\n"],"names":["getResolver","resolveAr","did","parsed","didResolver","options","arweave","Arweave","didDocument","readContract","resolveArlocal","error"],"mappings":"yJA+BO,SAASA,GAAc,CAW7B,eAAeC,EACdC,EACAC,EACAC,EACAC,EACuB,CAMjB,MAAAC,EAAUC,EAAQ,KAAK,CAC5B,KAAM,cACN,KAAM,IACN,SAAU,OAAA,CACV,EACKC,EAAc,MAAMC,EAAa,aAAAH,EAASH,EAAO,EAAE,EAKlD,MAAA,CACN,sBAAuB,CAAE,YAAa,yBAA0B,EAChE,YAAAK,EACA,oBAAqB,CAAC,CAAA,CAExB,CAEA,eAAeE,EACdR,EACAC,EACAC,EACAC,EACuB,CAKf,QAAA,IAAI,uBAAwBF,EAAO,EAAE,EACvC,MAAAG,EAAUC,EAAQ,KAAK,CAC5B,KAAM,YACN,KAAM,KACN,SAAU,MAAA,CACV,EACG,GAAA,CACK,QAAA,IAAI,iBAAkBD,CAAO,EACrC,MAAME,EAAc,MAAMC,EAAa,aAAAH,EAASH,EAAO,EAAE,EACjD,eAAA,IAAI,CAAE,YAAAK,CAAA,CAAa,EAKpB,CACN,sBAAuB,CAAE,YAAa,yBAA0B,EAChE,YAAAA,EACA,oBAAqB,CAAC,CAAA,QAEfG,GACA,eAAA,IAAI,iBAAkBA,CAAK,EAC5B,EACR,CACD,CAEA,MAAO,CAAE,GAAIV,EAAW,QAASS,CAAe,CACjD"}