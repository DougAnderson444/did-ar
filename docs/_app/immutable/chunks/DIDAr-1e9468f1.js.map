{"version":3,"mappings":"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","names":["ctx","i","t_value","insert_hydration","target","dirty","create_if_block_1","createEventDispatcher","allContracts","makeDid","contractTxId","local","Arweave","arweave","ownerAddress","txIds","query","res","$$invalidate","edge","tag","_b","dispatch","t2_value","is_function","set_data","append_hydration","span","didar","did","existing","creating","handleCreateDID","onMount","urlParams","init","jwk","address","interval","e","wallet"],"sources":["../../../../../../src/lib/ListDIDs.svelte","../../../../../../src/lib/DIDAr.svelte"],"sourcesContent":["<script lang=\"ts\">\r\n\timport { onMount, createEventDispatcher } from 'svelte';\r\n\timport ResolveDID from './ResolveDID.svelte';\r\n\t// import Arweave from 'arweave';\r\n\r\n\texport let ownerAddress: string;\r\n\texport let local: boolean = false;\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tlet allContracts: any[];\r\n\tlet makeDid: Function | null;\r\n\r\n\tonMount(async () => {\r\n\t\tconsole.log('Looking for DID contracts...', new Date().toLocaleTimeString());\r\n\t\tmakeDid = (contractTxId: string) =>\r\n\t\t\tlocal ? `did:arlocal:${contractTxId}` : `did:ar:${contractTxId}`;\r\n\r\n\t\tlet Arweave = await import('arweave');\r\n\t\tif (Arweave?.default) Arweave = Arweave.default;\r\n\t\tif (Arweave?.default) Arweave = Arweave.default;\r\n\r\n\t\tlet arweave = Arweave.init({\r\n\t\t\thost: 'arweave.net',\r\n\t\t\tport: 443,\r\n\t\t\tprotocol: 'https',\r\n\t\t\ttimeout: 20000,\r\n\t\t\tlogging: false\r\n\t\t});\r\n\r\n\t\tarweave\r\n\t\t\t.arql({\r\n\t\t\t\top: 'and',\r\n\t\t\t\texpr1: {\r\n\t\t\t\t\top: 'equals',\r\n\t\t\t\t\texpr1: 'App-Name',\r\n\t\t\t\t\texpr2: 'SmartWeaveContract'\r\n\t\t\t\t},\r\n\t\t\t\texpr2: {\r\n\t\t\t\t\top: 'equals',\r\n\t\t\t\t\texpr1: 'Uploader-Contract-Owner',\r\n\t\t\t\t\texpr2: ownerAddress\r\n\t\t\t\t},\r\n\t\t\t\texpr3: {\r\n\t\t\t\t\top: 'equals',\r\n\t\t\t\t\texpr1: 'Content-Type',\r\n\t\t\t\t\texpr2: 'application/json'\r\n\t\t\t\t},\r\n\t\t\t\texpr4: {\r\n\t\t\t\t\top: 'equals',\r\n\t\t\t\t\texpr1: 'DID-AR',\r\n\t\t\t\t\texpr2: 'true'\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then(async (txIds) => {\r\n\t\t\t\tconsole.log('txIds', txIds);\r\n\t\t\t\t// given a tx id, get the tags for the tx\r\n\t\t\t\t// make a query that looks up this txId\r\n\t\t\t\t// get the contract id from the tags\r\n\t\t\t\tconst query = `query {\r\n\t\t\t\t\t\t\t\ttransactions(ids: [\"${txIds.join('\",\"')}\"]) {\r\n\t\t\t\t\t\t\t\t\tedges {\r\n\t\t\t\t\t\t\t\t\t\tnode {\r\n\t\t\t\t\t\t\t\t\t\t\tblock {\r\n\t\t\t\t\t\t\t\t\t\t\t\ttimestamp\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\ttags {\r\n\t\t\t\t\t\t\t\t\t\t\t\tname\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}`;\r\n\r\n\t\t\t\tconst res = await arweave.api.post(\r\n\t\t\t\t\t'graphql',\r\n\t\t\t\t\t{ query },\r\n\t\t\t\t\t{ headers: { 'content-type': 'application/json' } }\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// for each of the edges, get the values of the array element with the name 'Contract' and return block timestamp toLocaleString\r\n\t\t\t\tallContracts = res.data.data.transactions.edges.map(\r\n\t\t\t\t\t(edge: { node: { tags: any[]; block: { timestamp: number } } }) => {\r\n\t\t\t\t\t\tconst contractId = edge.node.tags.find((tag) => tag.name === 'Uploader-Tx-Id').value;\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tid: contractId,\r\n\t\t\t\t\t\t\ttimestamp: new Date(edge.node?.block?.timestamp * 1000).toLocaleString() || null\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t\tdispatch('searchComplete', allContracts);\r\n\t\t\t});\r\n\t});\r\n</script>\r\n\r\n{#if allContracts}\r\n\t{#each allContracts as contract}\r\n\t\t<!-- && contract?.verificationMethod?.length -->\r\n\t\t{#if makeDid && contract.id}\r\n\t\t\t<ResolveDID did={makeDid(contract.id)}\r\n\t\t\t\t>{makeDid(contract.id)}\r\n\t\t\t\t<div slot=\"timestamp\">{new Date(contract.timestamp * 1000).toLocaleString()}</div>\r\n\t\t\t</ResolveDID>\r\n\t\t{/if}\r\n\t{/each}\r\n{/if}\r\n","<script lang=\"ts\">\r\n\timport { onMount } from 'svelte';\r\n\t// @ts-ignore\r\n\timport type { handlers } from '@peerpiper/iframe-wallet-sdk';\r\n\r\n\timport ListDIDs from './ListDIDs.svelte';\r\n\timport Spinner from './Spinner.svelte';\r\n\r\n\texport let RSAPublicKey: { kty: string; n: string; e: string; kid?: string };\r\n\texport let Ed25519PublicKey: Uint8Array;\r\n\texport let wallet: handlers;\r\n\texport let srcTx: string | null;\r\n\r\n\tlet didar: DIDAr;\r\n\tlet did: string;\r\n\tlet local: boolean = false;\r\n\tlet existing: boolean = false;\r\n\tlet creating: boolean = false;\r\n\tlet ownerAddress: string;\r\n\r\n\tlet handleCreateDID: () => Promise<void>;\r\n\r\n\tonMount(async () => {\r\n\t\t// get location params, check to see if local is set to true\r\n\t\tconst urlParams = new URLSearchParams(window.location.search);\r\n\t\tlocal = urlParams.get('local') === 'true';\r\n\r\n\t\tconst { init } = await import('./didar');\r\n\t\tdidar = await init({ local });\r\n\r\n\t\tif (local) {\r\n\t\t\tconst { jwk, address } = await didar.warp.testing.generateWallet();\r\n\t\t\tdidar.wallet = jwk; // override 'use_wallet' and set to funded wallet for testing\r\n\t\t\townerAddress = address;\r\n\t\t\tconsole.log('test address', address);\r\n\t\t}\r\n\r\n\t\thandleCreateDID = async function () {\r\n\t\t\tcreating = true;\r\n\t\t\tdid = await didar.create({\r\n\t\t\t\tRSAPublicKey,\r\n\t\t\t\tEd25519PublicKey,\r\n\t\t\t\tsrcTx\r\n\t\t\t});\r\n\t\t\t// refresh did variable every second until searchComplete is non null\r\n\t\t\tconst interval = setInterval(async () => {\r\n\t\t\t\townerAddress = ownerAddress; // refresh ListDIDs\r\n\t\t\t\tif (existing) {\r\n\t\t\t\t\tclearInterval(interval);\r\n\t\t\t\t\tcreating = false;\r\n\t\t\t\t}\r\n\t\t\t}, 400);\r\n\t\t};\r\n\t});\r\n\r\n\t$: if (wallet) (async () => (ownerAddress = await wallet.arweaveWalletAPI.getActiveAddress()))();\r\n\r\n\tasync function searchComplete(e: CustomEvent) {\r\n\t\tconsole.log('searchComplete', e.detail);\r\n\t\texisting = e.detail.length;\r\n\t}\r\n</script>\r\n\r\n{#if wallet && didar && ownerAddress}\r\n\t{#key wallet}\r\n\t\t{#key did}\r\n\t\t\t<ListDIDs {ownerAddress} on:searchComplete={searchComplete} />\r\n\t\t{/key}\r\n\r\n\t\t{#if !creating && !existing && handleCreateDID}\r\n\t\t\t<div class=\"m-4 p-4\">\r\n\t\t\t\t{#if srcTx}\r\n\t\t\t\t\tUsing existing contract <span class=\"font-mono bg-gray-50 m-2 p-2 rounded\">\r\n\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\thref=\"https://sonar.warp.cc/#/app/source/{srcTx}#code\"\r\n\t\t\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\t\t\trel=\"noopener noreferrer\">{srcTx}üîó‚ÜóÔ∏è</a\r\n\t\t\t\t\t\t></span\r\n\t\t\t\t\t>\r\n\t\t\t\t{:else}\r\n\t\t\t\t\tWe will deploy a new Smart Contract to manage your DID.\r\n\t\t\t\t{/if}\r\n\t\t\t</div>\r\n\r\n\t\t\t<div\r\n\t\t\t\tclass=\"bg-blue-600 hover:bg-blue-500 shadow rounded-lg m-4 p-4 w-fit text-white cursor-pointer\"\r\n\t\t\t\ton:click={handleCreateDID}\r\n\t\t\t\ton:keypress={handleCreateDID}\r\n\t\t\t>\r\n\t\t\t\tUse wallet keys to Create new Decentralized Identity, deployed on {local\r\n\t\t\t\t\t? 'local'\r\n\t\t\t\t\t: process.env.NODE_ENV}\r\n\t\t\t</div>\r\n\t\t{:else if creating}\r\n\t\t\t<Spinner>Creating DID...</Spinner>\r\n\t\t{/if}\r\n\t{/key}\r\n{:else}\r\n\tConnect with Wallet to create a Decentralized Identity\r\n{/if}\r\n\r\n<!-- <style lang=\"postcss\"></style> -->\r\n"],"file":"_app/immutable/chunks/DIDAr-1e9468f1.js"}