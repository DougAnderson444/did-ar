{"version":3,"mappings":"4JA4BO,SAASA,GAAc,CAW7B,eAAeC,EACdC,EACAC,EACAC,EACAC,EACuB,CAGvB,KAAM,CAAE,aAAgB,cAAM,OAAO,yNAI/BC,GAAe,MAFVC,EAAY,aAES,SAASJ,EAAO,EAAE,EAAE,UAAU,GAAG,YAAY,MAItE,OACN,sBAAuB,CAAE,YAAa,yBAA0B,EAChE,cACA,oBAAqB,CAAC,EAExB,CAEA,eAAeK,EACdN,EACAC,EACAC,EACAC,EACuB,CAGvB,KAAM,CAAE,aAAgB,cAAM,OAAO,yNAI/BC,GAAe,MAFVC,EAAY,WAES,SAASJ,EAAO,EAAE,EAAE,UAAU,GAAG,YAAY,MAItE,OACN,sBAAuB,CAAE,YAAa,yBAA0B,EAChE,cACA,oBAAqB,CAAC,EAExB,CAEA,MAAO,CAAE,GAAIF,EAAW,QAASO,CAAe,CACjD","names":["getResolver","resolveAr","did","parsed","didResolver","options","didDocument","WarpFactory","resolveArlocal"],"sources":["../../../../../../src/lib/resolver.ts"],"sourcesContent":["// https://github.com/decentralized-identity/did-resolver\r\n// import { WarpFactory } from 'warp-contracts';\r\nexport interface DIDDocumentMetadata extends Extensible {\r\n\tcreated?: string;\r\n\tupdated?: string;\r\n\tdeactivated?: boolean;\r\n\tversionId?: string;\r\n\tnextUpdate?: string;\r\n\tnextVersionId?: string;\r\n\tequivalentId?: string;\r\n\tcanonicalId?: string;\r\n}\r\n\r\nexport type DIDDocument = {\r\n\t'@context'?: 'https://www.w3.org/ns/did/v1' | string | string[];\r\n\tid: string;\r\n\talsoKnownAs?: string[];\r\n\tcontroller?: string | string[];\r\n\tverificationMethod?: VerificationMethod[];\r\n\tservice?: Service[];\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\tpublicKey?: VerificationMethod[];\r\n} & {\r\n\t[x in KeyCapabilitySection]?: (string | VerificationMethod)[];\r\n};\r\n\r\nexport function getResolver() {\r\n\t/**\r\n\t * @param {string} did\r\n\t * @param {string} parsed.method\r\n\t * @param {string} parsed.id\r\n\t * @param {string} parsed.did\r\n\t * @param {string} parsed.path\r\n\t * @param {string} parsed.fragment\r\n\t * @param {Resolver} didResolver\r\n\t * @param {DIDResolutionOptions} options\r\n\t */\r\n\tasync function resolveAr(\r\n\t\tdid: string,\r\n\t\tparsed: ParsedDID,\r\n\t\tdidResolver: Resolver,\r\n\t\toptions: DIDResolutionOptions\r\n\t): Promise<DIDDocument> {\r\n\t\tconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n\r\n\t\tconst { WarpFactory } = await import('warp-contracts'); // build process needs node version\r\n\r\n\t\tlet warp = WarpFactory.forMainnet();\r\n\r\n\t\tconst didDocument = (await warp.contract(parsed.id).readState()).cachedValue.state; // lookup doc\r\n\t\t// If you need to lookup another did as part of resolving this did document, the primary DIDResolver object is passed in as well\r\n\t\t// const parentDID = await didResolver.resolve(...)\r\n\t\t// Return the DIDResolutionResult object\r\n\t\treturn {\r\n\t\t\tdidResolutionMetadata: { contentType: 'application/did+ld+json' },\r\n\t\t\tdidDocument,\r\n\t\t\tdidDocumentMetadata: {}\r\n\t\t};\r\n\t}\r\n\r\n\tasync function resolveArlocal(\r\n\t\tdid: string,\r\n\t\tparsed: ParsedDID,\r\n\t\tdidResolver: Resolver,\r\n\t\toptions: DIDResolutionOptions\r\n\t): Promise<DIDDocument> {\r\n\t\tconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\r\n\r\n\t\tconst { WarpFactory } = await import('warp-contracts'); // build process needs node version\r\n\r\n\t\tlet warp = WarpFactory.forLocal();\r\n\r\n\t\tconst didDocument = (await warp.contract(parsed.id).readState()).cachedValue.state; // lookup doc\r\n\t\t// If you need to lookup another did as part of resolving this did document, the primary DIDResolver object is passed in as well\r\n\t\t// const parentDID = await didResolver.resolve(...)\r\n\t\t// Return the DIDResolutionResult object\r\n\t\treturn {\r\n\t\t\tdidResolutionMetadata: { contentType: 'application/did+ld+json' },\r\n\t\t\tdidDocument,\r\n\t\t\tdidDocumentMetadata: {}\r\n\t\t};\r\n\t}\r\n\r\n\treturn { ar: resolveAr, arlocal: resolveArlocal };\r\n}\r\n"],"file":"_app/immutable/chunks/index-6cc5c2db.js"}