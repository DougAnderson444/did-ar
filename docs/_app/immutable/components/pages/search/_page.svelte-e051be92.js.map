{"version":3,"file":"_page.svelte-e051be92.js","sources":["../../../../../../../../src/routes/search/+page.svelte"],"sourcesContent":["<script>\r\n\t// @ts-nocheck\r\n\r\n\t/**\r\n\t * Resolve the DID document for the given undername record in ARNS\r\n\t */\r\n\timport { onMount } from 'svelte';\r\n\timport Spinner from '$lib/Spinner.svelte';\r\n\timport ResolveDID from '$lib/ResolveDID.svelte';\r\n\r\n\timport { arns, arnsResolver } from '@peerpiper/did-ar';\r\n\r\n\t// let arnsResolver;\r\n\tlet arnsName;\r\n\tlet did;\r\n\tconst CacheOptions = { inMemory: true };\r\n\r\n\tonMount(async () => {\r\n\t\t// ({ arnsResolver } = await import('@peerpiper/did-ar')); // gives me warp issues\r\n\t\t// get params from location path\r\n\t\tconst queryString = window.location.search;\r\n\t\tconst params = new URLSearchParams(queryString);\r\n\r\n\t\t// split pathname and get the last part\r\n\t\tarnsName = params.get('name');\r\n\r\n\t\tconsole.log({ arnsName });\r\n\t});\r\n\r\n\t$: if (arnsResolver && arnsName) resolve(arnsName);\r\n\r\n\tasync function resolve(arnsName) {\r\n\t\tlet arnsInstance = await arns.init({ CacheOptions: { inMemory: true } });\r\n\t\tconst antContractId = await arnsInstance.resolveARNS(arnsName);\r\n\t\tdid = await arnsInstance.resolveANT(antContractId);\r\n\t}\r\n</script>\r\n\r\n{#if did}\r\n\t<ResolveDID {did}>{did}</ResolveDID>\r\n{:else}\r\n\t<Spinner>Loading DID Doc...</Spinner>\r\n{/if}\r\n"],"names":["ctx","arnsName","did","onMount","queryString","params","$$invalidate","resolve","arnsInstance","arns.init","antContractId","arnsResolver"],"mappings":"o/BAyCU,oBAAkB,cAAlB,oBAAkB,sEAFRA,EAAG,EAAA,cAAHA,EAAG,EAAA,oCAAHA,EAAG,EAAA,sFADlBA,EAAG,GAAA,iVAzBHC,EACAC,EAGJC,EAAO,SAAA,CAGA,MAAAC,EAAc,OAAO,SAAS,OAC9BC,EAAM,IAAO,gBAAgBD,CAAW,EAG9CE,EAAA,EAAAL,EAAWI,EAAO,IAAI,MAAM,CAAA,EAE5B,QAAQ,IAAG,CAAG,SAAAJ,CAAQ,CAAA,IAKR,eAAAM,EAAQN,EAAQ,KAC1BO,EAAY,MAASC,GAAY,aAAY,CAAI,SAAU,EAAI,CAAA,CAAA,EAC7D,MAAAC,EAAsB,MAAAF,EAAa,YAAYP,CAAQ,EAC7DK,EAAA,EAAAJ,EAAY,MAAAM,EAAa,WAAWE,CAAa,CAAA,wCAL3CC,GAAgBV,GAAUM,EAAQN,CAAQ"}